#!/usr/bin/env bash

# Create and enter a directory
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Update man-cache for Nixos
function updatemancache() {
    set -x
    sudo mkdir -p /var/cache/man/nixos || return 1;
    sudo mandb || return 1;
    echo "Cashes rebuilt successfully!"
}

# Nixos: upgrade flake and download updated packages
function upgrademynixos() {
    set -x
    pushd /etc/nixos
    nix-channel --update || return 1;
    nix flake update || return 2;
    sudo nixos-rebuild switch --flake . || return 3;
    printf "Your system's flake has been updated and you got new version of your packages";
    uname -a;
    popd
}
# Update channels, update flakes, switch to new version
upgrademynixos="cd /etc/nixos && nix-channel --update && "

# Starts an HTTP server for 5 minutes
# Shares a given location when given an argument or the current dir otherwise 
function fileserver() {
    local timeout="5m"
    printf "Creating fileserver for %s\nShared directory: " "${timeout}" 
    if [[ -n "$1" ]]; then
        printf "%s\n" "$1" 
        timeout ${timeout} python3 -m http.server 8421 -d "$1";
    else
        printf "%s\n" "${PWD}" 
        timeout ${timeout} python3 -m http.server 8420;
    fi
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# The 'tree' command on steroids - lists hidden files except .git/node_modules,
# listing dirs first, pipes into less with line numbers and colors when
# the screen is too small to fit the output
function tre() {
	tree -aC -I '.git|node_modules' --dirsfirst "$@" | less -FRNX;
}

# Displays available aliases in dmenu
function listalias() {
	local res=$(compgen -A alias | dmenu)
}

# Displays available funcitons in dmenu
function listfun() {
	# Ignoring those with an underscore (mostly nvm functions)
	local res=$(compgen -A function | grep -v "_" | dmenu)
}

# Shortcut for activating python venv (just type dir name)
function activate() {
	source "./$@/bin/activate"
}

# Create a python3 venv in a specified directory and activate it
function pyvenv() {
	python3 -m venv "$@" && echo "Created venv: $_" 
}

# Same as above and activate it
function pyvenvact() {
	python3 -m venv "$@" && source "$_/bin/activate"
}

# Load image to docker
# It always rebuilds the image
function dockload() {
    docker load < $(nix-build "${1}")
}

